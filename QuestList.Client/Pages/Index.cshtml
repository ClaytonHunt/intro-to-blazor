@page "/"
@using QuestList.Client.State
@inject QuestState QuestState
@implements IDisposable

<div class="left-nav">
    <div class="active-quests">
        <ul>
            @foreach (var quest in QuestState.Quests.Where(q => !q.IsCompleted).Reverse())
            {
            <li>
                <a class="@(QuestState.IsCurrentQuest(quest) ? "active" : "") @(quest.IsBeingWorked ? "working" : "")"
                   onmouseover="@(async () => await QuestState.SelectQuest(quest))"
                   onclick="@(async () => await QuestState.ToggleQuest(quest))">
                    @quest.Name
                </a>
            </li>
            }
        </ul>
    </div>
    <hr />
    <div class="completed-quests">
        <ul>
            @foreach (var quest in QuestState.Quests.Where(q => q.IsCompleted))
            {
            <li>
                <a class="@(QuestState.IsCurrentQuest(quest) ? "active" : "") @(quest.IsBeingWorked ? "working" : "")"
                   onmouseover="@(async () => await QuestState.SelectQuest(quest))"
                   onclick="@(async () => await QuestState.ToggleQuest(quest))">
                    @quest.Name
                </a>
            </li>
            }
        </ul>
    </div>
</div>

<div class="content">
    @if (QuestState.CurrentQuest != null)
    {
    <h1>@QuestState.CurrentQuest.Name</h1>

        if (@QuestState.CurrentQuest.Description != "")
        {
    <div>@QuestState.CurrentQuest.Description</div>
    <div class="objectives">Objectives</div>
        }

    <ul>
        @foreach (var task in QuestState.CurrentQuest.Tasks)
            {
        <li>

            <a class="@(QuestState.IsCurrentTask(task) ? "active" : "") @(task.IsCompleted ? "complete" : "")"
               onclick="@(async () => await QuestState.ToggleTask(task))"
               onmouseover="@(() => QuestState.SelectTask(task))">
                @task.Name
            </a>
        </li>
            }
    </ul>
    }
</div>

@functions {
    protected override void OnInit()
    {
        QuestState.OnStateChanged += OnStateChanged;
    }

    void IDisposable.Dispose()
    {
        QuestState.OnStateChanged -= OnStateChanged;
    }

    void OnStateChanged(object sender, EventArgs e) => StateHasChanged();
}