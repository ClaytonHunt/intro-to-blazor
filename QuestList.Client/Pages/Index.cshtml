@page "/"
@using Microsoft.AspNetCore.Components
@using QuestList.Shared.Models
@inject HttpClient HttpClient

<div class="quests">
    <div class="active-quests">
        <ul>
            @foreach (var quest in Quests.Where(q => !q.IsCompleted).Reverse())
            {
                <li>
                    <a class="@(IsCurrentQuest(quest) ? "active" : "") @(quest.IsBeingWorked ? "working" : "")"
                       onmouseover="@(async () => await SelectQuest(quest))"
                       onclick="@(async () => await ToggleQuest(quest))">
                        @quest.Name
                    </a>
                </li>
            }
        </ul>
    </div>    
    <hr/>
    <div class="completed-quests">
        <ul>
            @foreach (var quest in Quests.Where(q => q.IsCompleted))
            {
                <li>
                    <a class="@(IsCurrentQuest(quest) ? "active" : "") @(quest.IsBeingWorked ? "working" : "")"
                       onmouseover="@(async () => await SelectQuest(quest))"
                       onclick="@(async () => await ToggleQuest(quest))">
                        @quest.Name
                    </a>
                </li>
            }
        </ul>
    </div>    
</div>

<div class="tasks">
    @if (CurrentQuest != null)
    {
        <h1>@CurrentQuest.Name</h1>
        
        if (@CurrentQuest.Description != "")
        {
             <div>@CurrentQuest.Description</div>
             <div class="objectives">Objectives</div>
        }        
        
        <ul>
            @foreach (var task in CurrentQuest.Tasks)
            {
                <li>

                    <a class="@(IsCurrentTask(task) ? "active" : "") @(task.IsCompleted ? "complete" : "")"
                       onclick="@(async () => await ToggleTask(task))"
                       onmouseover="@(() => SelectTask(task))">
                        @task.Name
                    </a>
                </li>
            }
        </ul>
    }
</div>

@functions
{
    IList<QuestLine> Quests { get; set; } = new List<QuestLine>();
    QuestLine CurrentQuest;
    QuestTask CurrentTask;

    protected override async Task OnInitAsync()
    {
        Quests = await HttpClient.GetJsonAsync<IList<QuestLine>>("/quests");
    }

    async Task SelectQuest(QuestLine quest)
    {
        CurrentQuest = quest;

        if (CurrentQuest.Tasks.Count == 0)
        {
            CurrentQuest.Tasks = await HttpClient.GetJsonAsync<IList<QuestTask>>($"/quests/{CurrentQuest.Id}/tasks");
        }
    }

    void SelectTask(QuestTask task)
    {
        CurrentTask = task;
    }

    async Task ToggleQuest(QuestLine quest)
    {
        quest.IsBeingWorked = !quest.IsBeingWorked;

        try
        {
            await HttpClient.PutJsonAsync($"/quests/{quest.Id}", quest);
        }
        catch (Exception ex)
        {
            quest.IsBeingWorked = !quest.IsBeingWorked;
        }
    }

    async Task ToggleTask(QuestTask task)
    {
        Console.WriteLine($"/quests/{CurrentQuest.Id}/tasks/{task.Id}");

        task.IsCompleted = !task.IsCompleted;

        try
        {
            await HttpClient.PutJsonAsync($"/quests/{CurrentQuest.Id}/tasks/{task.Id}", task);
            await UpdateQuestStatus(CurrentQuest);
        }
        catch (Exception ex)
        {
            task.IsCompleted = !task.IsCompleted;
        }
    }

    public async Task UpdateQuestStatus(QuestLine quest)
    {
        quest.IsCompleted = !quest.IsPermanent && quest.Tasks.All(t => t.IsCompleted);
        quest.IsBeingWorked = !quest.IsCompleted && quest.IsBeingWorked;

        await HttpClient.PutJsonAsync($"/quests/{quest.Id}", quest);
    }

    bool IsCurrentQuest(QuestLine quest)
    {
        return quest == CurrentQuest;
    }

    bool IsCurrentTask(QuestTask task)
    {
        return task == CurrentTask;
    }
}