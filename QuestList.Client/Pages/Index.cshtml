@page "/"
@using Microsoft.AspNetCore.Components
@using QuestList.Shared.Models
@inject HttpClient HttpClient

<div class="quests">
    <ul>
        @foreach (var quest in Quests.Reverse())
        {
            <li>
                <a class="@(IsCurrentQuest(quest) ? "active" : "") @(quest.IsBeingWorked ? "working" : "")"
                   onmouseover="@(async () => await SelectQuest(quest))"
                   onclick="@(async () => await ToggleQuest(quest))">
                    @quest.Name
                </a>
            </li>
        }
    </ul>
</div>

<div class="tasks">
    @if (CurrentQuest != null)
    {
        <h1>@CurrentQuest.Name</h1>
        <p>@CurrentQuest.Description</p>
        <div class="objectives">Objectives</div>
        <ul>
            @foreach (var task in CurrentQuest.Tasks)
            {
                <li>@task.Name</li>
            }
        </ul>
    }
</div>

@functions
{
    IList<QuestLine> Quests { get; set; } = new List<QuestLine>();
    QuestLine CurrentQuest;

    protected override async Task OnInitAsync()
    {
        Quests = await HttpClient.GetJsonAsync<IList<QuestLine>>("/quests");
    }

    async Task SelectQuest(QuestLine quest)
    {
        CurrentQuest = quest;

        if (CurrentQuest.Tasks.Count == 0)
        {
            CurrentQuest.Tasks = await HttpClient.GetJsonAsync<IList<QuestTask>>($"/quests/{CurrentQuest.Id}/tasks");
        }
    }

    async Task ToggleQuest(QuestLine quest)
    {
        quest.IsBeingWorked = !quest.IsBeingWorked;

        try
        {
            await HttpClient.PutJsonAsync($"/quests/{quest.Id}", quest);
        }
        catch (Exception ex)
        {
            quest.IsBeingWorked = !quest.IsBeingWorked;
        }
    }

    bool IsCurrentQuest(QuestLine quest)
    {
        return quest == CurrentQuest;
    }
}