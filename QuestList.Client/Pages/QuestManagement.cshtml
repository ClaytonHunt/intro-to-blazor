@page "/admin"
@using QuestList.Client.State
@using QuestList.Shared.Models
@inject QuestState QuestState
@implements IDisposable

<div class="left-nav">
    <ul>
        <li>
            <a class="active working">Manage Quests</a>
        </li>
    </ul>
</div>
<div class="content">
    <h1>Manage Quests</h1>
    <div class="quest-list">
        @foreach (var q in QuestState.Quests)
        {
        <div class="quest-entry @(QuestState.IsCurrentQuest(q) ? "active" : "")">
            <span class="title">@q.Name</span>
            <div class="actions">
                <button type="button" onclick="@(async () => await QuestState.SelectQuest(q))">Edit</button>
                <button type="button" onclick="@(async () => await QuestState.DeleteQuest(q))">Delete</button>
            </div>
        </div>
        }
        <div class="actions">
            <button type="button" onclick="@(async () => await QuestState.SelectQuest(new QuestLine()))">New Quest</button>
        </div>
    </div>
    @if (QuestState.CurrentQuest != null)
    {
    <hr />
    <div class="quest-edit">
        <h2>Quest Details</h2>
        <div class="input-group">
            <label>Name</label>
            <input type="text" bind-value-oninput="@QuestState.CurrentQuest.Name" />
        </div>
        <div class="input-group">
            <label>Description</label>
            <textarea type="text" bind="@QuestState.CurrentQuest.Description"></textarea>
        </div>
        <div class="actions">
            <button type="button" onclick="@(() => QuestState.SaveQuest(QuestState.CurrentQuest))">Save</button>
            <button type="button" onclick="@(() => QuestState.SelectQuest(QuestState.CurrentQuest))">Reset</button>
        </div>
    </div>
    <div class="task-list">
        @foreach (var t in QuestState.CurrentQuest.Tasks)
            {
        <div class="task-entry @(QuestState.IsCurrentTask(t) ? "active" : "")">
            <span class="title">@t.Name</span>
            <div class="actions">
                <button type="button" onclick="@(() => QuestState.SelectTask(t))">Edit</button>
                <button type="button" onclick="@(() => QuestState.DeleteTask(t))">Delete</button>
            </div>
        </div>
            }
        <div class="actions">
            <button type="button" onclick="@(() => QuestState.SelectTask(new QuestTask()))">New Task</button>
        </div>
    </div>
        if (QuestState.CurrentTask != null)
        {
    <hr />
    <div class="task-edit">
        <h2>Task Details</h2>
        <div class="input-group">
            <label>Name</label>
            <input type="text" bind-value-oninput="@QuestState.CurrentTask.Name" />
        </div>
        <div class="actions">
            <button type="button" onclick="@(() => QuestState.SaveTask(QuestState.CurrentTask))">Save</button>
            <button type="button" onclick="@(() => QuestState.SelectTask(QuestState.CurrentTask))">Reset</button>
        </div>
    </div>
        }
    }
</div>

@functions {
    protected override void OnInit()
    {
        QuestState.OnStateChanged += OnStateChanged;
    }

    void IDisposable.Dispose()
    {
        QuestState.OnStateChanged -= OnStateChanged;
    }

    void OnStateChanged(object sender, EventArgs e) => StateHasChanged();
}